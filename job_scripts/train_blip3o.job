#!/bin/bash
#SBATCH --job-name=blip3o_direct_test
#SBATCH --partition=gpu_h100
#SBATCH --nodes=1
#SBATCH --gpus=2
#SBATCH --cpus-per-task=16
#SBATCH --mem=180G
#SBATCH --time=1:00:00
#SBATCH --output=./slurm_out/blip3o_direct_test_%j.out
#SBATCH --error=./slurm_out/blip3o_direct_test_%j.err

echo "üß™ DIRECT TEST - Bypassing Validation"
echo "====================================="
echo "Job ID: ${SLURM_JOB_ID}"
echo "Time: $(date)"
echo "====================================="

cd $SLURM_SUBMIT_DIR

# Setup environment
module purge
module load 2024
module load Miniconda3/24.7.1-0
module load CUDA/12.6.0
source activate eva_clip_env

# Suppress warnings
export PYTHONWARNINGS="ignore::UserWarning"

# Setup directories
export BLIP3O_WORKSPACE="/scratch-shared/$(whoami)/blip3o_workspace"
export BLIP3O_CHECKPOINTS="${BLIP3O_WORKSPACE}/checkpoints"
mkdir -p "${BLIP3O_CHECKPOINTS}"
mkdir -p ./slurm_out

# EXACT path you confirmed works
EMBEDDINGS_DIR="/scratch-shared/azadaianchuk1/blip3o_workspace/embeddings/patch_embeddings_short_256"
OUTPUT_DIR="$BLIP3O_CHECKPOINTS/direct_test_$(date +%Y%m%d_%H%M%S)"

echo "üîç Testing exact path access..."
echo "Path: $EMBEDDINGS_DIR"
echo ""

# Test 1: Check directory exists
if [ -d "$EMBEDDINGS_DIR" ]; then
    echo "‚úÖ Directory exists"
else
    echo "‚ùå Directory does not exist"
    echo "Current working directory: $(pwd)"
    echo "User: $(whoami)"
    exit 1
fi

# Test 2: List files
echo "üìÅ Files in directory:"
ls -la "$EMBEDDINGS_DIR"
echo ""

# Test 3: Count .pkl files
PKL_COUNT=$(find "$EMBEDDINGS_DIR" -name "*.pkl" | wc -l)
echo "‚úÖ Found $PKL_COUNT .pkl files"
echo ""

# Test 4: Test Python can access files
echo "üêç Testing Python file access..."
python3 -c "
import pickle
from pathlib import Path

embeddings_dir = Path('$EMBEDDINGS_DIR')
print(f'Python sees directory: {embeddings_dir.exists()}')

pkl_files = list(embeddings_dir.glob('*.pkl'))
print(f'Python found {len(pkl_files)} .pkl files')

if pkl_files:
    # Try to load first file
    first_file = pkl_files[0]
    print(f'Testing load of: {first_file.name}')
    try:
        with open(first_file, 'rb') as f:
            data = pickle.load(f)
        print(f'‚úÖ Successfully loaded pickle file')
        
        # Check data structure
        if isinstance(data, dict):
            print(f'Data keys: {list(data.keys())}')
            for key, value in data.items():
                if hasattr(value, 'shape'):
                    print(f'  {key}: shape {value.shape}')
                else:
                    print(f'  {key}: type {type(value)}')
    except Exception as e:
        print(f'‚ùå Error loading pickle: {e}')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Python test failed"
    exit 1
fi

echo ""
echo "‚úÖ All path tests passed! Now testing training..."
echo ""

# Configuration for minimal test
WORLD_SIZE=${SLURM_GPUS_ON_NODE}
BATCH_SIZE=8  # Very small for safety
MAX_BATCHES=3  # Only 3 batches total

# Build minimal training command
TRAINING_CMD="torchrun \
    --nproc_per_node=$WORLD_SIZE \
    --master_port=12355 \
    train_dit_distributed.py \
    --chunked_embeddings_dir \"$EMBEDDINGS_DIR\" \
    --output_dir \"$OUTPUT_DIR\" \
    --distributed \
    --world_size $WORLD_SIZE \
    --model_size base \
    --training_mode patch_only \
    --batch_size $BATCH_SIZE \
    --learning_rate 4e-5 \
    --num_epochs 1 \
    --max_shards 3 \
    --fsdp_sharding_strategy FULL_SHARD \
    --fsdp_mixed_precision \
    --max_batches_per_epoch $MAX_BATCHES \
    --progress_tracking \
    --use_eva_adapter \
    --fp16 \
    --eval_every_n_steps 1000"

echo "üöÄ Running minimal distributed training test..."
echo "Command: $TRAINING_CMD"
echo ""

# Run with explicit warning suppression
PYTHONWARNINGS="ignore::UserWarning" $TRAINING_CMD

TRAINING_EXIT_CODE=$?

echo ""
echo "====================================="
echo "üìä Direct Test Results"
echo "====================================="

if [ $TRAINING_EXIT_CODE -eq 0 ]; then
    echo "üéâ SUCCESS! Direct test passed!"
    echo ""
    echo "‚úÖ Path access: Working"
    echo "‚úÖ File loading: Working"
    echo "‚úÖ Distributed training: Working"
    echo "‚úÖ No hanging: Confirmed"
    echo ""
    echo "üöÄ Your setup is working correctly!"
    echo "The issue was likely in the validation logic."
    echo ""
    echo "To run full training, use this exact path:"
    echo "EMBEDDINGS_DIR=\"$EMBEDDINGS_DIR\""
    
else
    echo "‚ùå Training failed with exit code: $TRAINING_EXIT_CODE"
    echo ""
    echo "But path access worked, so the issue is in the training logic."
    echo "Check the error details above."
fi

echo ""
echo "üèÅ Direct test completed at $(date)"
echo "====================================="

exit $TRAINING_EXIT_CODE